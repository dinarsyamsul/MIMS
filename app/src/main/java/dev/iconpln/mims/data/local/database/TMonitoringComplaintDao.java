package dev.iconpln.mims.data.local.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TMONITORING_COMPLAINT".
*/
public class TMonitoringComplaintDao extends AbstractDao<TMonitoringComplaint, Long> {

    public static final String TABLENAME = "TMONITORING_COMPLAINT";

    /**
     * Properties of entity TMonitoringComplaint.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property NoKomplainSmar = new Property(1, String.class, "NoKomplainSmar", false, "NO_KOMPLAIN_SMAR");
        public final static Property NoDoSmar = new Property(2, String.class, "NoDoSmar", false, "NO_DO_SMAR");
        public final static Property TanggalSelesai = new Property(3, String.class, "TanggalSelesai", false, "TANGGAL_SELESAI");
        public final static Property PoSapNo = new Property(4, String.class, "PoSapNo", false, "PO_SAP_NO");
        public final static Property Qty = new Property(5, Integer.class, "qty", false, "QTY");
        public final static Property NoKomplain = new Property(6, String.class, "NoKomplain", false, "NO_KOMPLAIN");
        public final static Property Alasan = new Property(7, String.class, "Alasan", false, "ALASAN");
        public final static Property Status = new Property(8, String.class, "Status", false, "STATUS");
        public final static Property PlantName = new Property(9, String.class, "PlantName", false, "PLANT_NAME");
        public final static Property TanggalPO = new Property(10, String.class, "TanggalPO", false, "TANGGAL_PO");
    }


    public TMonitoringComplaintDao(DaoConfig config) {
        super(config);
    }
    
    public TMonitoringComplaintDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TMONITORING_COMPLAINT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NO_KOMPLAIN_SMAR\" TEXT," + // 1: NoKomplainSmar
                "\"NO_DO_SMAR\" TEXT," + // 2: NoDoSmar
                "\"TANGGAL_SELESAI\" TEXT," + // 3: TanggalSelesai
                "\"PO_SAP_NO\" TEXT," + // 4: PoSapNo
                "\"QTY\" INTEGER," + // 5: qty
                "\"NO_KOMPLAIN\" TEXT," + // 6: NoKomplain
                "\"ALASAN\" TEXT," + // 7: Alasan
                "\"STATUS\" TEXT," + // 8: Status
                "\"PLANT_NAME\" TEXT," + // 9: PlantName
                "\"TANGGAL_PO\" TEXT);"); // 10: TanggalPO
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TMONITORING_COMPLAINT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TMonitoringComplaint entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String NoKomplainSmar = entity.getNoKomplainSmar();
        if (NoKomplainSmar != null) {
            stmt.bindString(2, NoKomplainSmar);
        }
 
        String NoDoSmar = entity.getNoDoSmar();
        if (NoDoSmar != null) {
            stmt.bindString(3, NoDoSmar);
        }
 
        String TanggalSelesai = entity.getTanggalSelesai();
        if (TanggalSelesai != null) {
            stmt.bindString(4, TanggalSelesai);
        }
 
        String PoSapNo = entity.getPoSapNo();
        if (PoSapNo != null) {
            stmt.bindString(5, PoSapNo);
        }
 
        Integer qty = entity.getQty();
        if (qty != null) {
            stmt.bindLong(6, qty);
        }
 
        String NoKomplain = entity.getNoKomplain();
        if (NoKomplain != null) {
            stmt.bindString(7, NoKomplain);
        }
 
        String Alasan = entity.getAlasan();
        if (Alasan != null) {
            stmt.bindString(8, Alasan);
        }
 
        String Status = entity.getStatus();
        if (Status != null) {
            stmt.bindString(9, Status);
        }
 
        String PlantName = entity.getPlantName();
        if (PlantName != null) {
            stmt.bindString(10, PlantName);
        }
 
        String TanggalPO = entity.getTanggalPO();
        if (TanggalPO != null) {
            stmt.bindString(11, TanggalPO);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TMonitoringComplaint entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String NoKomplainSmar = entity.getNoKomplainSmar();
        if (NoKomplainSmar != null) {
            stmt.bindString(2, NoKomplainSmar);
        }
 
        String NoDoSmar = entity.getNoDoSmar();
        if (NoDoSmar != null) {
            stmt.bindString(3, NoDoSmar);
        }
 
        String TanggalSelesai = entity.getTanggalSelesai();
        if (TanggalSelesai != null) {
            stmt.bindString(4, TanggalSelesai);
        }
 
        String PoSapNo = entity.getPoSapNo();
        if (PoSapNo != null) {
            stmt.bindString(5, PoSapNo);
        }
 
        Integer qty = entity.getQty();
        if (qty != null) {
            stmt.bindLong(6, qty);
        }
 
        String NoKomplain = entity.getNoKomplain();
        if (NoKomplain != null) {
            stmt.bindString(7, NoKomplain);
        }
 
        String Alasan = entity.getAlasan();
        if (Alasan != null) {
            stmt.bindString(8, Alasan);
        }
 
        String Status = entity.getStatus();
        if (Status != null) {
            stmt.bindString(9, Status);
        }
 
        String PlantName = entity.getPlantName();
        if (PlantName != null) {
            stmt.bindString(10, PlantName);
        }
 
        String TanggalPO = entity.getTanggalPO();
        if (TanggalPO != null) {
            stmt.bindString(11, TanggalPO);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TMonitoringComplaint readEntity(Cursor cursor, int offset) {
        TMonitoringComplaint entity = new TMonitoringComplaint( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // NoKomplainSmar
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // NoDoSmar
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // TanggalSelesai
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // PoSapNo
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // qty
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // NoKomplain
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // Alasan
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // Status
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // PlantName
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // TanggalPO
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TMonitoringComplaint entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNoKomplainSmar(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNoDoSmar(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTanggalSelesai(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPoSapNo(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setQty(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setNoKomplain(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAlasan(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setStatus(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPlantName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setTanggalPO(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TMonitoringComplaint entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TMonitoringComplaint entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TMonitoringComplaint entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
