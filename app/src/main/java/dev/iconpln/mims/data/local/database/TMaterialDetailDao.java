package dev.iconpln.mims.data.local.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TMATERIAL_DETAIL".
*/
public class TMaterialDetailDao extends AbstractDao<TMaterialDetail, Long> {

    public static final String TABLENAME = "TMATERIAL_DETAIL";

    /**
     * Properties of entity TMaterialDetail.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property NomorMaterial = new Property(1, String.class, "NomorMaterial", false, "NOMOR_MATERIAL");
        public final static Property Mmc = new Property(2, String.class, "Mmc", false, "MMC");
        public final static Property MaterialGroup = new Property(3, String.class, "MaterialGroup", false, "MATERIAL_GROUP");
        public final static Property TglProduksi = new Property(4, String.class, "TglProduksi", false, "TGL_PRODUKSI");
        public final static Property KdPabrikan = new Property(5, String.class, "KdPabrikan", false, "KD_PABRIKAN");
        public final static Property SerialNumber = new Property(6, String.class, "serialNumber", false, "SERIAL_NUMBER");
        public final static Property NomorSertMaterologi = new Property(7, String.class, "NomorSertMaterologi", false, "NOMOR_SERT_MATEROLOGI");
        public final static Property Spln = new Property(8, String.class, "Spln", false, "SPLN");
        public final static Property NoProduksi = new Property(9, String.class, "NoProduksi", false, "NO_PRODUKSI");
        public final static Property Storloc = new Property(10, String.class, "Storloc", false, "STORLOC");
        public final static Property NoPackaging = new Property(11, String.class, "NoPackaging", false, "NO_PACKAGING");
        public final static Property Spesifikasi = new Property(12, String.class, "Spesifikasi", false, "SPESIFIKASI");
        public final static Property Plant = new Property(13, String.class, "Plant", false, "PLANT");
        public final static Property MaterialId = new Property(14, String.class, "MaterialId", false, "MATERIAL_ID");
        public final static Property MasaGaransi = new Property(15, String.class, "MasaGaransi", false, "MASA_GARANSI");
        public final static Property Tahun = new Property(16, String.class, "Tahun", false, "TAHUN");
        public final static Property NamaKategoriMaterial = new Property(17, String.class, "NamaKategoriMaterial", false, "NAMA_KATEGORI_MATERIAL");
    }


    public TMaterialDetailDao(DaoConfig config) {
        super(config);
    }
    
    public TMaterialDetailDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TMATERIAL_DETAIL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NOMOR_MATERIAL\" TEXT," + // 1: NomorMaterial
                "\"MMC\" TEXT," + // 2: Mmc
                "\"MATERIAL_GROUP\" TEXT," + // 3: MaterialGroup
                "\"TGL_PRODUKSI\" TEXT," + // 4: TglProduksi
                "\"KD_PABRIKAN\" TEXT," + // 5: KdPabrikan
                "\"SERIAL_NUMBER\" TEXT," + // 6: serialNumber
                "\"NOMOR_SERT_MATEROLOGI\" TEXT," + // 7: NomorSertMaterologi
                "\"SPLN\" TEXT," + // 8: Spln
                "\"NO_PRODUKSI\" TEXT," + // 9: NoProduksi
                "\"STORLOC\" TEXT," + // 10: Storloc
                "\"NO_PACKAGING\" TEXT," + // 11: NoPackaging
                "\"SPESIFIKASI\" TEXT," + // 12: Spesifikasi
                "\"PLANT\" TEXT," + // 13: Plant
                "\"MATERIAL_ID\" TEXT," + // 14: MaterialId
                "\"MASA_GARANSI\" TEXT," + // 15: MasaGaransi
                "\"TAHUN\" TEXT," + // 16: Tahun
                "\"NAMA_KATEGORI_MATERIAL\" TEXT);"); // 17: NamaKategoriMaterial
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TMATERIAL_DETAIL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TMaterialDetail entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String NomorMaterial = entity.getNomorMaterial();
        if (NomorMaterial != null) {
            stmt.bindString(2, NomorMaterial);
        }
 
        String Mmc = entity.getMmc();
        if (Mmc != null) {
            stmt.bindString(3, Mmc);
        }
 
        String MaterialGroup = entity.getMaterialGroup();
        if (MaterialGroup != null) {
            stmt.bindString(4, MaterialGroup);
        }
 
        String TglProduksi = entity.getTglProduksi();
        if (TglProduksi != null) {
            stmt.bindString(5, TglProduksi);
        }
 
        String KdPabrikan = entity.getKdPabrikan();
        if (KdPabrikan != null) {
            stmt.bindString(6, KdPabrikan);
        }
 
        String serialNumber = entity.getSerialNumber();
        if (serialNumber != null) {
            stmt.bindString(7, serialNumber);
        }
 
        String NomorSertMaterologi = entity.getNomorSertMaterologi();
        if (NomorSertMaterologi != null) {
            stmt.bindString(8, NomorSertMaterologi);
        }
 
        String Spln = entity.getSpln();
        if (Spln != null) {
            stmt.bindString(9, Spln);
        }
 
        String NoProduksi = entity.getNoProduksi();
        if (NoProduksi != null) {
            stmt.bindString(10, NoProduksi);
        }
 
        String Storloc = entity.getStorloc();
        if (Storloc != null) {
            stmt.bindString(11, Storloc);
        }
 
        String NoPackaging = entity.getNoPackaging();
        if (NoPackaging != null) {
            stmt.bindString(12, NoPackaging);
        }
 
        String Spesifikasi = entity.getSpesifikasi();
        if (Spesifikasi != null) {
            stmt.bindString(13, Spesifikasi);
        }
 
        String Plant = entity.getPlant();
        if (Plant != null) {
            stmt.bindString(14, Plant);
        }
 
        String MaterialId = entity.getMaterialId();
        if (MaterialId != null) {
            stmt.bindString(15, MaterialId);
        }
 
        String MasaGaransi = entity.getMasaGaransi();
        if (MasaGaransi != null) {
            stmt.bindString(16, MasaGaransi);
        }
 
        String Tahun = entity.getTahun();
        if (Tahun != null) {
            stmt.bindString(17, Tahun);
        }
 
        String NamaKategoriMaterial = entity.getNamaKategoriMaterial();
        if (NamaKategoriMaterial != null) {
            stmt.bindString(18, NamaKategoriMaterial);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TMaterialDetail entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String NomorMaterial = entity.getNomorMaterial();
        if (NomorMaterial != null) {
            stmt.bindString(2, NomorMaterial);
        }
 
        String Mmc = entity.getMmc();
        if (Mmc != null) {
            stmt.bindString(3, Mmc);
        }
 
        String MaterialGroup = entity.getMaterialGroup();
        if (MaterialGroup != null) {
            stmt.bindString(4, MaterialGroup);
        }
 
        String TglProduksi = entity.getTglProduksi();
        if (TglProduksi != null) {
            stmt.bindString(5, TglProduksi);
        }
 
        String KdPabrikan = entity.getKdPabrikan();
        if (KdPabrikan != null) {
            stmt.bindString(6, KdPabrikan);
        }
 
        String serialNumber = entity.getSerialNumber();
        if (serialNumber != null) {
            stmt.bindString(7, serialNumber);
        }
 
        String NomorSertMaterologi = entity.getNomorSertMaterologi();
        if (NomorSertMaterologi != null) {
            stmt.bindString(8, NomorSertMaterologi);
        }
 
        String Spln = entity.getSpln();
        if (Spln != null) {
            stmt.bindString(9, Spln);
        }
 
        String NoProduksi = entity.getNoProduksi();
        if (NoProduksi != null) {
            stmt.bindString(10, NoProduksi);
        }
 
        String Storloc = entity.getStorloc();
        if (Storloc != null) {
            stmt.bindString(11, Storloc);
        }
 
        String NoPackaging = entity.getNoPackaging();
        if (NoPackaging != null) {
            stmt.bindString(12, NoPackaging);
        }
 
        String Spesifikasi = entity.getSpesifikasi();
        if (Spesifikasi != null) {
            stmt.bindString(13, Spesifikasi);
        }
 
        String Plant = entity.getPlant();
        if (Plant != null) {
            stmt.bindString(14, Plant);
        }
 
        String MaterialId = entity.getMaterialId();
        if (MaterialId != null) {
            stmt.bindString(15, MaterialId);
        }
 
        String MasaGaransi = entity.getMasaGaransi();
        if (MasaGaransi != null) {
            stmt.bindString(16, MasaGaransi);
        }
 
        String Tahun = entity.getTahun();
        if (Tahun != null) {
            stmt.bindString(17, Tahun);
        }
 
        String NamaKategoriMaterial = entity.getNamaKategoriMaterial();
        if (NamaKategoriMaterial != null) {
            stmt.bindString(18, NamaKategoriMaterial);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TMaterialDetail readEntity(Cursor cursor, int offset) {
        TMaterialDetail entity = new TMaterialDetail( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // NomorMaterial
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Mmc
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // MaterialGroup
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // TglProduksi
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // KdPabrikan
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // serialNumber
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // NomorSertMaterologi
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // Spln
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // NoProduksi
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // Storloc
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // NoPackaging
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // Spesifikasi
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // Plant
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // MaterialId
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // MasaGaransi
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // Tahun
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17) // NamaKategoriMaterial
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TMaterialDetail entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNomorMaterial(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMmc(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMaterialGroup(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTglProduksi(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setKdPabrikan(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSerialNumber(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setNomorSertMaterologi(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSpln(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setNoProduksi(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setStorloc(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setNoPackaging(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setSpesifikasi(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setPlant(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setMaterialId(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setMasaGaransi(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setTahun(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setNamaKategoriMaterial(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TMaterialDetail entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TMaterialDetail entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TMaterialDetail entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
