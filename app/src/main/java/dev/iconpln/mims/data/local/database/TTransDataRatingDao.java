package dev.iconpln.mims.data.local.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TTRANS_DATA_RATING".
*/
public class TTransDataRatingDao extends AbstractDao<TTransDataRating, Long> {

    public static final String TABLENAME = "TTRANS_DATA_RATING";

    /**
     * Properties of entity TTransDataRating.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Ketepatan = new Property(1, Integer.class, "Ketepatan", false, "KETEPATAN");
        public final static Property RatingQuality = new Property(2, String.class, "RatingQuality", false, "RATING_QUALITY");
        public final static Property RatingDelivery = new Property(3, String.class, "RatingDelivery", false, "RATING_DELIVERY");
        public final static Property SelesaiRating = new Property(4, Boolean.class, "SelesaiRating", false, "SELESAI_RATING");
        public final static Property NoDoSmar = new Property(5, String.class, "NoDoSmar", false, "NO_DO_SMAR");
        public final static Property RatingResponse = new Property(6, String.class, "RatingResponse", false, "RATING_RESPONSE");
        public final static Property IsDone = new Property(7, Integer.class, "IsDone", false, "IS_DONE");
    }


    public TTransDataRatingDao(DaoConfig config) {
        super(config);
    }
    
    public TTransDataRatingDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TTRANS_DATA_RATING\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"KETEPATAN\" INTEGER," + // 1: Ketepatan
                "\"RATING_QUALITY\" TEXT," + // 2: RatingQuality
                "\"RATING_DELIVERY\" TEXT," + // 3: RatingDelivery
                "\"SELESAI_RATING\" INTEGER," + // 4: SelesaiRating
                "\"NO_DO_SMAR\" TEXT," + // 5: NoDoSmar
                "\"RATING_RESPONSE\" TEXT," + // 6: RatingResponse
                "\"IS_DONE\" INTEGER);"); // 7: IsDone
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TTRANS_DATA_RATING\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TTransDataRating entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer Ketepatan = entity.getKetepatan();
        if (Ketepatan != null) {
            stmt.bindLong(2, Ketepatan);
        }
 
        String RatingQuality = entity.getRatingQuality();
        if (RatingQuality != null) {
            stmt.bindString(3, RatingQuality);
        }
 
        String RatingDelivery = entity.getRatingDelivery();
        if (RatingDelivery != null) {
            stmt.bindString(4, RatingDelivery);
        }
 
        Boolean SelesaiRating = entity.getSelesaiRating();
        if (SelesaiRating != null) {
            stmt.bindLong(5, SelesaiRating ? 1L: 0L);
        }
 
        String NoDoSmar = entity.getNoDoSmar();
        if (NoDoSmar != null) {
            stmt.bindString(6, NoDoSmar);
        }
 
        String RatingResponse = entity.getRatingResponse();
        if (RatingResponse != null) {
            stmt.bindString(7, RatingResponse);
        }
 
        Integer IsDone = entity.getIsDone();
        if (IsDone != null) {
            stmt.bindLong(8, IsDone);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TTransDataRating entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer Ketepatan = entity.getKetepatan();
        if (Ketepatan != null) {
            stmt.bindLong(2, Ketepatan);
        }
 
        String RatingQuality = entity.getRatingQuality();
        if (RatingQuality != null) {
            stmt.bindString(3, RatingQuality);
        }
 
        String RatingDelivery = entity.getRatingDelivery();
        if (RatingDelivery != null) {
            stmt.bindString(4, RatingDelivery);
        }
 
        Boolean SelesaiRating = entity.getSelesaiRating();
        if (SelesaiRating != null) {
            stmt.bindLong(5, SelesaiRating ? 1L: 0L);
        }
 
        String NoDoSmar = entity.getNoDoSmar();
        if (NoDoSmar != null) {
            stmt.bindString(6, NoDoSmar);
        }
 
        String RatingResponse = entity.getRatingResponse();
        if (RatingResponse != null) {
            stmt.bindString(7, RatingResponse);
        }
 
        Integer IsDone = entity.getIsDone();
        if (IsDone != null) {
            stmt.bindLong(8, IsDone);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TTransDataRating readEntity(Cursor cursor, int offset) {
        TTransDataRating entity = new TTransDataRating( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // Ketepatan
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // RatingQuality
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // RatingDelivery
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // SelesaiRating
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // NoDoSmar
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // RatingResponse
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7) // IsDone
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TTransDataRating entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setKetepatan(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setRatingQuality(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRatingDelivery(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSelesaiRating(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setNoDoSmar(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRatingResponse(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIsDone(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TTransDataRating entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TTransDataRating entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TTransDataRating entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
