package dev.iconpln.mims.data.local.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TTRANS_PENERIMAAN_DETAIL_ULP".
*/
public class TTransPenerimaanDetailUlpDao extends AbstractDao<TTransPenerimaanDetailUlp, Long> {

    public static final String TABLENAME = "TTRANS_PENERIMAAN_DETAIL_ULP";

    /**
     * Properties of entity TTransPenerimaanDetailUlp.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property NoTransaksi = new Property(1, String.class, "NoTransaksi", false, "NO_TRANSAKSI");
        public final static Property NoRepackaging = new Property(2, String.class, "NoRepackaging", false, "NO_REPACKAGING");
        public final static Property NoMaterial = new Property(3, String.class, "NoMaterial", false, "NO_MATERIAL");
        public final static Property MaterialDesc = new Property(4, String.class, "MaterialDesc", false, "MATERIAL_DESC");
        public final static Property QtyPermintaan = new Property(5, Integer.class, "QtyPermintaan", false, "QTY_PERMINTAAN");
        public final static Property QtyPengiriman = new Property(6, Integer.class, "QtyPengiriman", false, "QTY_PENGIRIMAN");
        public final static Property QtyPemeriksaan = new Property(7, Integer.class, "QtyPemeriksaan", false, "QTY_PEMERIKSAAN");
        public final static Property QtyPenerimaan = new Property(8, Integer.class, "QtyPenerimaan", false, "QTY_PENERIMAAN");
        public final static Property QtySesuai = new Property(9, Integer.class, "QtySesuai", false, "QTY_SESUAI");
        public final static Property IsDone = new Property(10, Integer.class, "IsDone", false, "IS_DONE");
    }


    public TTransPenerimaanDetailUlpDao(DaoConfig config) {
        super(config);
    }
    
    public TTransPenerimaanDetailUlpDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TTRANS_PENERIMAAN_DETAIL_ULP\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NO_TRANSAKSI\" TEXT," + // 1: NoTransaksi
                "\"NO_REPACKAGING\" TEXT," + // 2: NoRepackaging
                "\"NO_MATERIAL\" TEXT," + // 3: NoMaterial
                "\"MATERIAL_DESC\" TEXT," + // 4: MaterialDesc
                "\"QTY_PERMINTAAN\" INTEGER," + // 5: QtyPermintaan
                "\"QTY_PENGIRIMAN\" INTEGER," + // 6: QtyPengiriman
                "\"QTY_PEMERIKSAAN\" INTEGER," + // 7: QtyPemeriksaan
                "\"QTY_PENERIMAAN\" INTEGER," + // 8: QtyPenerimaan
                "\"QTY_SESUAI\" INTEGER," + // 9: QtySesuai
                "\"IS_DONE\" INTEGER);"); // 10: IsDone
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TTRANS_PENERIMAAN_DETAIL_ULP\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TTransPenerimaanDetailUlp entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String NoTransaksi = entity.getNoTransaksi();
        if (NoTransaksi != null) {
            stmt.bindString(2, NoTransaksi);
        }
 
        String NoRepackaging = entity.getNoRepackaging();
        if (NoRepackaging != null) {
            stmt.bindString(3, NoRepackaging);
        }
 
        String NoMaterial = entity.getNoMaterial();
        if (NoMaterial != null) {
            stmt.bindString(4, NoMaterial);
        }
 
        String MaterialDesc = entity.getMaterialDesc();
        if (MaterialDesc != null) {
            stmt.bindString(5, MaterialDesc);
        }
 
        Integer QtyPermintaan = entity.getQtyPermintaan();
        if (QtyPermintaan != null) {
            stmt.bindLong(6, QtyPermintaan);
        }
 
        Integer QtyPengiriman = entity.getQtyPengiriman();
        if (QtyPengiriman != null) {
            stmt.bindLong(7, QtyPengiriman);
        }
 
        Integer QtyPemeriksaan = entity.getQtyPemeriksaan();
        if (QtyPemeriksaan != null) {
            stmt.bindLong(8, QtyPemeriksaan);
        }
 
        Integer QtyPenerimaan = entity.getQtyPenerimaan();
        if (QtyPenerimaan != null) {
            stmt.bindLong(9, QtyPenerimaan);
        }
 
        Integer QtySesuai = entity.getQtySesuai();
        if (QtySesuai != null) {
            stmt.bindLong(10, QtySesuai);
        }
 
        Integer IsDone = entity.getIsDone();
        if (IsDone != null) {
            stmt.bindLong(11, IsDone);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TTransPenerimaanDetailUlp entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String NoTransaksi = entity.getNoTransaksi();
        if (NoTransaksi != null) {
            stmt.bindString(2, NoTransaksi);
        }
 
        String NoRepackaging = entity.getNoRepackaging();
        if (NoRepackaging != null) {
            stmt.bindString(3, NoRepackaging);
        }
 
        String NoMaterial = entity.getNoMaterial();
        if (NoMaterial != null) {
            stmt.bindString(4, NoMaterial);
        }
 
        String MaterialDesc = entity.getMaterialDesc();
        if (MaterialDesc != null) {
            stmt.bindString(5, MaterialDesc);
        }
 
        Integer QtyPermintaan = entity.getQtyPermintaan();
        if (QtyPermintaan != null) {
            stmt.bindLong(6, QtyPermintaan);
        }
 
        Integer QtyPengiriman = entity.getQtyPengiriman();
        if (QtyPengiriman != null) {
            stmt.bindLong(7, QtyPengiriman);
        }
 
        Integer QtyPemeriksaan = entity.getQtyPemeriksaan();
        if (QtyPemeriksaan != null) {
            stmt.bindLong(8, QtyPemeriksaan);
        }
 
        Integer QtyPenerimaan = entity.getQtyPenerimaan();
        if (QtyPenerimaan != null) {
            stmt.bindLong(9, QtyPenerimaan);
        }
 
        Integer QtySesuai = entity.getQtySesuai();
        if (QtySesuai != null) {
            stmt.bindLong(10, QtySesuai);
        }
 
        Integer IsDone = entity.getIsDone();
        if (IsDone != null) {
            stmt.bindLong(11, IsDone);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TTransPenerimaanDetailUlp readEntity(Cursor cursor, int offset) {
        TTransPenerimaanDetailUlp entity = new TTransPenerimaanDetailUlp( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // NoTransaksi
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // NoRepackaging
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // NoMaterial
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // MaterialDesc
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // QtyPermintaan
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // QtyPengiriman
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // QtyPemeriksaan
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // QtyPenerimaan
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // QtySesuai
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10) // IsDone
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TTransPenerimaanDetailUlp entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNoTransaksi(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNoRepackaging(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNoMaterial(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMaterialDesc(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setQtyPermintaan(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setQtyPengiriman(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setQtyPemeriksaan(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setQtyPenerimaan(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setQtySesuai(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setIsDone(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TTransPenerimaanDetailUlp entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TTransPenerimaanDetailUlp entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TTransPenerimaanDetailUlp entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
