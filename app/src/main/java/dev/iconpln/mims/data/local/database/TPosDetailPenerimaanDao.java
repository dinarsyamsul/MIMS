package dev.iconpln.mims.data.local.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TPOS_DETAIL_PENERIMAAN".
*/
public class TPosDetailPenerimaanDao extends AbstractDao<TPosDetailPenerimaan, Long> {

    public static final String TABLENAME = "TPOS_DETAIL_PENERIMAAN";

    /**
     * Properties of entity TPosDetailPenerimaan.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property NoDoSmar = new Property(1, String.class, "NoDoSmar", false, "NO_DO_SMAR");
        public final static Property Qty = new Property(2, String.class, "Qty", false, "QTY");
        public final static Property KdPabrikan = new Property(3, String.class, "KdPabrikan", false, "KD_PABRIKAN");
        public final static Property DoStatus = new Property(4, String.class, "DoStatus", false, "DO_STATUS");
        public final static Property NoPackaging = new Property(5, String.class, "NoPackaging", false, "NO_PACKAGING");
        public final static Property SerialNumber = new Property(6, String.class, "SerialNumber", false, "SERIAL_NUMBER");
        public final static Property NoMaterial = new Property(7, String.class, "NoMaterial", false, "NO_MATERIAL");
        public final static Property NamaKategoriMaterial = new Property(8, String.class, "NamaKategoriMaterial", false, "NAMA_KATEGORI_MATERIAL");
        public final static Property StorLoc = new Property(9, String.class, "StorLoc", false, "STOR_LOC");
        public final static Property Status = new Property(10, String.class, "Status", false, "STATUS");
        public final static Property IsChecked = new Property(11, Integer.class, "IsChecked", false, "IS_CHECKED");
        public final static Property IsDone = new Property(12, Integer.class, "IsDone", false, "IS_DONE");
    }


    public TPosDetailPenerimaanDao(DaoConfig config) {
        super(config);
    }
    
    public TPosDetailPenerimaanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TPOS_DETAIL_PENERIMAAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NO_DO_SMAR\" TEXT," + // 1: NoDoSmar
                "\"QTY\" TEXT," + // 2: Qty
                "\"KD_PABRIKAN\" TEXT," + // 3: KdPabrikan
                "\"DO_STATUS\" TEXT," + // 4: DoStatus
                "\"NO_PACKAGING\" TEXT," + // 5: NoPackaging
                "\"SERIAL_NUMBER\" TEXT," + // 6: SerialNumber
                "\"NO_MATERIAL\" TEXT," + // 7: NoMaterial
                "\"NAMA_KATEGORI_MATERIAL\" TEXT," + // 8: NamaKategoriMaterial
                "\"STOR_LOC\" TEXT," + // 9: StorLoc
                "\"STATUS\" TEXT," + // 10: Status
                "\"IS_CHECKED\" INTEGER," + // 11: IsChecked
                "\"IS_DONE\" INTEGER);"); // 12: IsDone
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TPOS_DETAIL_PENERIMAAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TPosDetailPenerimaan entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String NoDoSmar = entity.getNoDoSmar();
        if (NoDoSmar != null) {
            stmt.bindString(2, NoDoSmar);
        }
 
        String Qty = entity.getQty();
        if (Qty != null) {
            stmt.bindString(3, Qty);
        }
 
        String KdPabrikan = entity.getKdPabrikan();
        if (KdPabrikan != null) {
            stmt.bindString(4, KdPabrikan);
        }
 
        String DoStatus = entity.getDoStatus();
        if (DoStatus != null) {
            stmt.bindString(5, DoStatus);
        }
 
        String NoPackaging = entity.getNoPackaging();
        if (NoPackaging != null) {
            stmt.bindString(6, NoPackaging);
        }
 
        String SerialNumber = entity.getSerialNumber();
        if (SerialNumber != null) {
            stmt.bindString(7, SerialNumber);
        }
 
        String NoMaterial = entity.getNoMaterial();
        if (NoMaterial != null) {
            stmt.bindString(8, NoMaterial);
        }
 
        String NamaKategoriMaterial = entity.getNamaKategoriMaterial();
        if (NamaKategoriMaterial != null) {
            stmt.bindString(9, NamaKategoriMaterial);
        }
 
        String StorLoc = entity.getStorLoc();
        if (StorLoc != null) {
            stmt.bindString(10, StorLoc);
        }
 
        String Status = entity.getStatus();
        if (Status != null) {
            stmt.bindString(11, Status);
        }
 
        Integer IsChecked = entity.getIsChecked();
        if (IsChecked != null) {
            stmt.bindLong(12, IsChecked);
        }
 
        Integer IsDone = entity.getIsDone();
        if (IsDone != null) {
            stmt.bindLong(13, IsDone);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TPosDetailPenerimaan entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String NoDoSmar = entity.getNoDoSmar();
        if (NoDoSmar != null) {
            stmt.bindString(2, NoDoSmar);
        }
 
        String Qty = entity.getQty();
        if (Qty != null) {
            stmt.bindString(3, Qty);
        }
 
        String KdPabrikan = entity.getKdPabrikan();
        if (KdPabrikan != null) {
            stmt.bindString(4, KdPabrikan);
        }
 
        String DoStatus = entity.getDoStatus();
        if (DoStatus != null) {
            stmt.bindString(5, DoStatus);
        }
 
        String NoPackaging = entity.getNoPackaging();
        if (NoPackaging != null) {
            stmt.bindString(6, NoPackaging);
        }
 
        String SerialNumber = entity.getSerialNumber();
        if (SerialNumber != null) {
            stmt.bindString(7, SerialNumber);
        }
 
        String NoMaterial = entity.getNoMaterial();
        if (NoMaterial != null) {
            stmt.bindString(8, NoMaterial);
        }
 
        String NamaKategoriMaterial = entity.getNamaKategoriMaterial();
        if (NamaKategoriMaterial != null) {
            stmt.bindString(9, NamaKategoriMaterial);
        }
 
        String StorLoc = entity.getStorLoc();
        if (StorLoc != null) {
            stmt.bindString(10, StorLoc);
        }
 
        String Status = entity.getStatus();
        if (Status != null) {
            stmt.bindString(11, Status);
        }
 
        Integer IsChecked = entity.getIsChecked();
        if (IsChecked != null) {
            stmt.bindLong(12, IsChecked);
        }
 
        Integer IsDone = entity.getIsDone();
        if (IsDone != null) {
            stmt.bindLong(13, IsDone);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TPosDetailPenerimaan readEntity(Cursor cursor, int offset) {
        TPosDetailPenerimaan entity = new TPosDetailPenerimaan( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // NoDoSmar
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Qty
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // KdPabrikan
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // DoStatus
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // NoPackaging
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // SerialNumber
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // NoMaterial
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // NamaKategoriMaterial
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // StorLoc
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // Status
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // IsChecked
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12) // IsDone
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TPosDetailPenerimaan entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNoDoSmar(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setQty(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setKdPabrikan(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDoStatus(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setNoPackaging(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSerialNumber(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setNoMaterial(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setNamaKategoriMaterial(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setStorLoc(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setStatus(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setIsChecked(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setIsDone(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TPosDetailPenerimaan entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TPosDetailPenerimaan entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TPosDetailPenerimaan entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
