package dev.iconpln.mims.data.local.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TLOKASI".
*/
public class TLokasiDao extends AbstractDao<TLokasi, Long> {

    public static final String TABLENAME = "TLOKASI";

    /**
     * Properties of entity TLokasi.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property NoDoSns = new Property(1, String.class, "NoDoSns", false, "NO_DO_SNS");
        public final static Property Ket = new Property(2, String.class, "Ket", false, "KET");
        public final static Property UpdateDate = new Property(3, String.class, "UpdateDate", false, "UPDATE_DATE");
    }


    public TLokasiDao(DaoConfig config) {
        super(config);
    }
    
    public TLokasiDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TLOKASI\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NO_DO_SNS\" TEXT," + // 1: NoDoSns
                "\"KET\" TEXT," + // 2: Ket
                "\"UPDATE_DATE\" TEXT);"); // 3: UpdateDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TLOKASI\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TLokasi entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String NoDoSns = entity.getNoDoSns();
        if (NoDoSns != null) {
            stmt.bindString(2, NoDoSns);
        }
 
        String Ket = entity.getKet();
        if (Ket != null) {
            stmt.bindString(3, Ket);
        }
 
        String UpdateDate = entity.getUpdateDate();
        if (UpdateDate != null) {
            stmt.bindString(4, UpdateDate);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TLokasi entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String NoDoSns = entity.getNoDoSns();
        if (NoDoSns != null) {
            stmt.bindString(2, NoDoSns);
        }
 
        String Ket = entity.getKet();
        if (Ket != null) {
            stmt.bindString(3, Ket);
        }
 
        String UpdateDate = entity.getUpdateDate();
        if (UpdateDate != null) {
            stmt.bindString(4, UpdateDate);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TLokasi readEntity(Cursor cursor, int offset) {
        TLokasi entity = new TLokasi( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // NoDoSns
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Ket
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // UpdateDate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TLokasi entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNoDoSns(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setKet(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUpdateDate(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TLokasi entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TLokasi entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TLokasi entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
