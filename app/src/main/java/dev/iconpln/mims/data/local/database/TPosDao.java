package dev.iconpln.mims.data.local.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TPOS".
*/
public class TPosDao extends AbstractDao<TPos, Long> {

    public static final String TABLENAME = "TPOS";

    /**
     * Properties of entity TPos.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property StorLoc = new Property(1, String.class, "StorLoc", false, "STOR_LOC");
        public final static Property Total = new Property(2, String.class, "Total", false, "TOTAL");
        public final static Property TlskNo = new Property(3, String.class, "TlskNo", false, "TLSK_NO");
        public final static Property PoSapNo = new Property(4, String.class, "PoSapNo", false, "PO_SAP_NO");
        public final static Property PoMpNo = new Property(5, String.class, "PoMpNo", false, "PO_MP_NO");
        public final static Property NoDoSmar = new Property(6, String.class, "NoDoSmar", false, "NO_DO_SMAR");
        public final static Property LeadTime = new Property(7, Integer.class, "LeadTime", false, "LEAD_TIME");
        public final static Property Storloc = new Property(8, String.class, "Storloc", false, "STORLOC");
        public final static Property CreatedDate = new Property(9, String.class, "CreatedDate", false, "CREATED_DATE");
        public final static Property PlanCodeNo = new Property(10, String.class, "PlanCodeNo", false, "PLAN_CODE_NO");
        public final static Property PlantName = new Property(11, String.class, "PlantName", false, "PLANT_NAME");
    }


    public TPosDao(DaoConfig config) {
        super(config);
    }
    
    public TPosDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TPOS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"STOR_LOC\" TEXT," + // 1: StorLoc
                "\"TOTAL\" TEXT," + // 2: Total
                "\"TLSK_NO\" TEXT," + // 3: TlskNo
                "\"PO_SAP_NO\" TEXT," + // 4: PoSapNo
                "\"PO_MP_NO\" TEXT," + // 5: PoMpNo
                "\"NO_DO_SMAR\" TEXT," + // 6: NoDoSmar
                "\"LEAD_TIME\" INTEGER," + // 7: LeadTime
                "\"STORLOC\" TEXT," + // 8: Storloc
                "\"CREATED_DATE\" TEXT," + // 9: CreatedDate
                "\"PLAN_CODE_NO\" TEXT," + // 10: PlanCodeNo
                "\"PLANT_NAME\" TEXT);"); // 11: PlantName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TPOS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TPos entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String StorLoc = entity.getStorLoc();
        if (StorLoc != null) {
            stmt.bindString(2, StorLoc);
        }
 
        String Total = entity.getTotal();
        if (Total != null) {
            stmt.bindString(3, Total);
        }
 
        String TlskNo = entity.getTlskNo();
        if (TlskNo != null) {
            stmt.bindString(4, TlskNo);
        }
 
        String PoSapNo = entity.getPoSapNo();
        if (PoSapNo != null) {
            stmt.bindString(5, PoSapNo);
        }
 
        String PoMpNo = entity.getPoMpNo();
        if (PoMpNo != null) {
            stmt.bindString(6, PoMpNo);
        }
 
        String NoDoSmar = entity.getNoDoSmar();
        if (NoDoSmar != null) {
            stmt.bindString(7, NoDoSmar);
        }
 
        Integer LeadTime = entity.getLeadTime();
        if (LeadTime != null) {
            stmt.bindLong(8, LeadTime);
        }
 
        String Storloc = entity.getStorloc();
        if (Storloc != null) {
            stmt.bindString(9, Storloc);
        }
 
        String CreatedDate = entity.getCreatedDate();
        if (CreatedDate != null) {
            stmt.bindString(10, CreatedDate);
        }
 
        String PlanCodeNo = entity.getPlanCodeNo();
        if (PlanCodeNo != null) {
            stmt.bindString(11, PlanCodeNo);
        }
 
        String PlantName = entity.getPlantName();
        if (PlantName != null) {
            stmt.bindString(12, PlantName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TPos entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String StorLoc = entity.getStorLoc();
        if (StorLoc != null) {
            stmt.bindString(2, StorLoc);
        }
 
        String Total = entity.getTotal();
        if (Total != null) {
            stmt.bindString(3, Total);
        }
 
        String TlskNo = entity.getTlskNo();
        if (TlskNo != null) {
            stmt.bindString(4, TlskNo);
        }
 
        String PoSapNo = entity.getPoSapNo();
        if (PoSapNo != null) {
            stmt.bindString(5, PoSapNo);
        }
 
        String PoMpNo = entity.getPoMpNo();
        if (PoMpNo != null) {
            stmt.bindString(6, PoMpNo);
        }
 
        String NoDoSmar = entity.getNoDoSmar();
        if (NoDoSmar != null) {
            stmt.bindString(7, NoDoSmar);
        }
 
        Integer LeadTime = entity.getLeadTime();
        if (LeadTime != null) {
            stmt.bindLong(8, LeadTime);
        }
 
        String Storloc = entity.getStorloc();
        if (Storloc != null) {
            stmt.bindString(9, Storloc);
        }
 
        String CreatedDate = entity.getCreatedDate();
        if (CreatedDate != null) {
            stmt.bindString(10, CreatedDate);
        }
 
        String PlanCodeNo = entity.getPlanCodeNo();
        if (PlanCodeNo != null) {
            stmt.bindString(11, PlanCodeNo);
        }
 
        String PlantName = entity.getPlantName();
        if (PlantName != null) {
            stmt.bindString(12, PlantName);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TPos readEntity(Cursor cursor, int offset) {
        TPos entity = new TPos( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // StorLoc
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Total
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // TlskNo
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // PoSapNo
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // PoMpNo
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // NoDoSmar
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // LeadTime
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // Storloc
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // CreatedDate
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // PlanCodeNo
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // PlantName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TPos entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStorLoc(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTotal(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTlskNo(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPoSapNo(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPoMpNo(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setNoDoSmar(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLeadTime(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setStorloc(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCreatedDate(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPlanCodeNo(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPlantName(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TPos entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TPos entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TPos entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
