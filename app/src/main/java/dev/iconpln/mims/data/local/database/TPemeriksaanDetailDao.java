package dev.iconpln.mims.data.local.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TPEMERIKSAAN_DETAIL".
*/
public class TPemeriksaanDetailDao extends AbstractDao<TPemeriksaanDetail, Void> {

    public static final String TABLENAME = "TPEMERIKSAAN_DETAIL";

    /**
     * Properties of entity TPemeriksaanDetail.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property NoPemeriksaan = new Property(0, String.class, "NoPemeriksaan", false, "NO_PEMERIKSAAN");
        public final static Property Sn = new Property(1, String.class, "Sn", false, "SN");
        public final static Property NoDoSmar = new Property(2, String.class, "NoDoSmar", false, "NO_DO_SMAR");
        public final static Property NoMaterail = new Property(3, String.class, "NoMaterail", false, "NO_MATERAIL");
        public final static Property NoPackaging = new Property(4, String.class, "NoPackaging", false, "NO_PACKAGING");
        public final static Property Status = new Property(5, String.class, "Status", false, "STATUS");
        public final static Property IsDone = new Property(6, Integer.class, "IsDone", false, "IS_DONE");
    }


    public TPemeriksaanDetailDao(DaoConfig config) {
        super(config);
    }
    
    public TPemeriksaanDetailDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TPEMERIKSAAN_DETAIL\" (" + //
                "\"NO_PEMERIKSAAN\" TEXT," + // 0: NoPemeriksaan
                "\"SN\" TEXT," + // 1: Sn
                "\"NO_DO_SMAR\" TEXT," + // 2: NoDoSmar
                "\"NO_MATERAIL\" TEXT," + // 3: NoMaterail
                "\"NO_PACKAGING\" TEXT," + // 4: NoPackaging
                "\"STATUS\" TEXT," + // 5: Status
                "\"IS_DONE\" INTEGER);"); // 6: IsDone
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TPEMERIKSAAN_DETAIL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TPemeriksaanDetail entity) {
        stmt.clearBindings();
 
        String NoPemeriksaan = entity.getNoPemeriksaan();
        if (NoPemeriksaan != null) {
            stmt.bindString(1, NoPemeriksaan);
        }
 
        String Sn = entity.getSn();
        if (Sn != null) {
            stmt.bindString(2, Sn);
        }
 
        String NoDoSmar = entity.getNoDoSmar();
        if (NoDoSmar != null) {
            stmt.bindString(3, NoDoSmar);
        }
 
        String NoMaterail = entity.getNoMaterail();
        if (NoMaterail != null) {
            stmt.bindString(4, NoMaterail);
        }
 
        String NoPackaging = entity.getNoPackaging();
        if (NoPackaging != null) {
            stmt.bindString(5, NoPackaging);
        }
 
        String Status = entity.getStatus();
        if (Status != null) {
            stmt.bindString(6, Status);
        }
 
        Integer IsDone = entity.getIsDone();
        if (IsDone != null) {
            stmt.bindLong(7, IsDone);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TPemeriksaanDetail entity) {
        stmt.clearBindings();
 
        String NoPemeriksaan = entity.getNoPemeriksaan();
        if (NoPemeriksaan != null) {
            stmt.bindString(1, NoPemeriksaan);
        }
 
        String Sn = entity.getSn();
        if (Sn != null) {
            stmt.bindString(2, Sn);
        }
 
        String NoDoSmar = entity.getNoDoSmar();
        if (NoDoSmar != null) {
            stmt.bindString(3, NoDoSmar);
        }
 
        String NoMaterail = entity.getNoMaterail();
        if (NoMaterail != null) {
            stmt.bindString(4, NoMaterail);
        }
 
        String NoPackaging = entity.getNoPackaging();
        if (NoPackaging != null) {
            stmt.bindString(5, NoPackaging);
        }
 
        String Status = entity.getStatus();
        if (Status != null) {
            stmt.bindString(6, Status);
        }
 
        Integer IsDone = entity.getIsDone();
        if (IsDone != null) {
            stmt.bindLong(7, IsDone);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public TPemeriksaanDetail readEntity(Cursor cursor, int offset) {
        TPemeriksaanDetail entity = new TPemeriksaanDetail( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // NoPemeriksaan
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Sn
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // NoDoSmar
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // NoMaterail
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // NoPackaging
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // Status
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6) // IsDone
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TPemeriksaanDetail entity, int offset) {
        entity.setNoPemeriksaan(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSn(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNoDoSmar(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNoMaterail(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNoPackaging(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setStatus(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIsDone(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(TPemeriksaanDetail entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(TPemeriksaanDetail entity) {
        return null;
    }

    @Override
    public boolean hasKey(TPemeriksaanDetail entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
