package dev.iconpln.mims.data.local.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TDETAIL_PEMERIKSAAN_ULP".
*/
public class TDetailPemeriksaanULPDao extends AbstractDao<TDetailPemeriksaanULP, Long> {

    public static final String TABLENAME = "TDETAIL_PEMERIKSAAN_ULP";

    /**
     * Properties of entity TDetailPemeriksaanULP.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property NoMaterial = new Property(1, String.class, "NoMaterial", false, "NO_MATERIAL");
        public final static Property Spesifikasi = new Property(2, String.class, "Spesifikasi", false, "SPESIFIKASI");
        public final static Property KuantitasPeriksa = new Property(3, String.class, "KuantitasPeriksa", false, "KUANTITAS_PERIKSA");
        public final static Property Kuantitas = new Property(4, String.class, "Kuantitas", false, "KUANTITAS");
        public final static Property GudangAsal = new Property(5, String.class, "GudangAsal", false, "GUDANG_ASAL");
        public final static Property SerialNumberScanned = new Property(6, String.class, "SerialNumberScanned", false, "SERIAL_NUMBER_SCANNED");
        public final static Property IsDone = new Property(7, String.class, "IsDone", false, "IS_DONE");
    }


    public TDetailPemeriksaanULPDao(DaoConfig config) {
        super(config);
    }
    
    public TDetailPemeriksaanULPDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TDETAIL_PEMERIKSAAN_ULP\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NO_MATERIAL\" TEXT," + // 1: NoMaterial
                "\"SPESIFIKASI\" TEXT," + // 2: Spesifikasi
                "\"KUANTITAS_PERIKSA\" TEXT," + // 3: KuantitasPeriksa
                "\"KUANTITAS\" TEXT," + // 4: Kuantitas
                "\"GUDANG_ASAL\" TEXT," + // 5: GudangAsal
                "\"SERIAL_NUMBER_SCANNED\" TEXT," + // 6: SerialNumberScanned
                "\"IS_DONE\" TEXT);"); // 7: IsDone
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TDETAIL_PEMERIKSAAN_ULP\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TDetailPemeriksaanULP entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String NoMaterial = entity.getNoMaterial();
        if (NoMaterial != null) {
            stmt.bindString(2, NoMaterial);
        }
 
        String Spesifikasi = entity.getSpesifikasi();
        if (Spesifikasi != null) {
            stmt.bindString(3, Spesifikasi);
        }
 
        String KuantitasPeriksa = entity.getKuantitasPeriksa();
        if (KuantitasPeriksa != null) {
            stmt.bindString(4, KuantitasPeriksa);
        }
 
        String Kuantitas = entity.getKuantitas();
        if (Kuantitas != null) {
            stmt.bindString(5, Kuantitas);
        }
 
        String GudangAsal = entity.getGudangAsal();
        if (GudangAsal != null) {
            stmt.bindString(6, GudangAsal);
        }
 
        String SerialNumberScanned = entity.getSerialNumberScanned();
        if (SerialNumberScanned != null) {
            stmt.bindString(7, SerialNumberScanned);
        }
 
        String IsDone = entity.getIsDone();
        if (IsDone != null) {
            stmt.bindString(8, IsDone);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TDetailPemeriksaanULP entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String NoMaterial = entity.getNoMaterial();
        if (NoMaterial != null) {
            stmt.bindString(2, NoMaterial);
        }
 
        String Spesifikasi = entity.getSpesifikasi();
        if (Spesifikasi != null) {
            stmt.bindString(3, Spesifikasi);
        }
 
        String KuantitasPeriksa = entity.getKuantitasPeriksa();
        if (KuantitasPeriksa != null) {
            stmt.bindString(4, KuantitasPeriksa);
        }
 
        String Kuantitas = entity.getKuantitas();
        if (Kuantitas != null) {
            stmt.bindString(5, Kuantitas);
        }
 
        String GudangAsal = entity.getGudangAsal();
        if (GudangAsal != null) {
            stmt.bindString(6, GudangAsal);
        }
 
        String SerialNumberScanned = entity.getSerialNumberScanned();
        if (SerialNumberScanned != null) {
            stmt.bindString(7, SerialNumberScanned);
        }
 
        String IsDone = entity.getIsDone();
        if (IsDone != null) {
            stmt.bindString(8, IsDone);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TDetailPemeriksaanULP readEntity(Cursor cursor, int offset) {
        TDetailPemeriksaanULP entity = new TDetailPemeriksaanULP( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // NoMaterial
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Spesifikasi
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // KuantitasPeriksa
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Kuantitas
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // GudangAsal
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // SerialNumberScanned
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // IsDone
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TDetailPemeriksaanULP entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNoMaterial(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSpesifikasi(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setKuantitasPeriksa(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setKuantitas(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setGudangAsal(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSerialNumberScanned(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIsDone(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TDetailPemeriksaanULP entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TDetailPemeriksaanULP entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TDetailPemeriksaanULP entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
