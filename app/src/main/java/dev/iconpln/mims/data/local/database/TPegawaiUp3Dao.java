package dev.iconpln.mims.data.local.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TPEGAWAI_UP3".
*/
public class TPegawaiUp3Dao extends AbstractDao<TPegawaiUp3, Long> {

    public static final String TABLENAME = "TPEGAWAI_UP3";

    /**
     * Properties of entity TPegawaiUp3.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Plant = new Property(1, String.class, "Plant", false, "PLANT");
        public final static Property NamaPegawai = new Property(2, String.class, "NamaPegawai", false, "NAMA_PEGAWAI");
        public final static Property KodeJabatan = new Property(3, String.class, "KodeJabatan", false, "KODE_JABATAN");
        public final static Property NamaJabatan = new Property(4, String.class, "NamaJabatan", false, "NAMA_JABATAN");
        public final static Property Nip = new Property(5, String.class, "Nip", false, "NIP");
        public final static Property IsActive = new Property(6, Boolean.class, "IsActive", false, "IS_ACTIVE");
    }


    public TPegawaiUp3Dao(DaoConfig config) {
        super(config);
    }
    
    public TPegawaiUp3Dao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TPEGAWAI_UP3\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"PLANT\" TEXT," + // 1: Plant
                "\"NAMA_PEGAWAI\" TEXT," + // 2: NamaPegawai
                "\"KODE_JABATAN\" TEXT," + // 3: KodeJabatan
                "\"NAMA_JABATAN\" TEXT," + // 4: NamaJabatan
                "\"NIP\" TEXT," + // 5: Nip
                "\"IS_ACTIVE\" INTEGER);"); // 6: IsActive
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TPEGAWAI_UP3\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TPegawaiUp3 entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String Plant = entity.getPlant();
        if (Plant != null) {
            stmt.bindString(2, Plant);
        }
 
        String NamaPegawai = entity.getNamaPegawai();
        if (NamaPegawai != null) {
            stmt.bindString(3, NamaPegawai);
        }
 
        String KodeJabatan = entity.getKodeJabatan();
        if (KodeJabatan != null) {
            stmt.bindString(4, KodeJabatan);
        }
 
        String NamaJabatan = entity.getNamaJabatan();
        if (NamaJabatan != null) {
            stmt.bindString(5, NamaJabatan);
        }
 
        String Nip = entity.getNip();
        if (Nip != null) {
            stmt.bindString(6, Nip);
        }
 
        Boolean IsActive = entity.getIsActive();
        if (IsActive != null) {
            stmt.bindLong(7, IsActive ? 1L: 0L);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TPegawaiUp3 entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String Plant = entity.getPlant();
        if (Plant != null) {
            stmt.bindString(2, Plant);
        }
 
        String NamaPegawai = entity.getNamaPegawai();
        if (NamaPegawai != null) {
            stmt.bindString(3, NamaPegawai);
        }
 
        String KodeJabatan = entity.getKodeJabatan();
        if (KodeJabatan != null) {
            stmt.bindString(4, KodeJabatan);
        }
 
        String NamaJabatan = entity.getNamaJabatan();
        if (NamaJabatan != null) {
            stmt.bindString(5, NamaJabatan);
        }
 
        String Nip = entity.getNip();
        if (Nip != null) {
            stmt.bindString(6, Nip);
        }
 
        Boolean IsActive = entity.getIsActive();
        if (IsActive != null) {
            stmt.bindLong(7, IsActive ? 1L: 0L);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TPegawaiUp3 readEntity(Cursor cursor, int offset) {
        TPegawaiUp3 entity = new TPegawaiUp3( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Plant
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // NamaPegawai
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // KodeJabatan
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // NamaJabatan
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // Nip
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0 // IsActive
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TPegawaiUp3 entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPlant(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNamaPegawai(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setKodeJabatan(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNamaJabatan(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setNip(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIsActive(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TPegawaiUp3 entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TPegawaiUp3 entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TPegawaiUp3 entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
