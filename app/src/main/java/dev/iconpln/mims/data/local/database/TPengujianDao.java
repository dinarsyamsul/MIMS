package dev.iconpln.mims.data.local.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TPENGUJIAN".
*/
public class TPengujianDao extends AbstractDao<TPengujian, Long> {

    public static final String TABLENAME = "TPENGUJIAN";

    /**
     * Properties of entity TPengujian.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TanggalUji = new Property(1, String.class, "TanggalUji", false, "TANGGAL_UJI");
        public final static Property NoPengujian = new Property(2, String.class, "NoPengujian", false, "NO_PENGUJIAN");
        public final static Property NamaKategori = new Property(3, String.class, "NamaKategori", false, "NAMA_KATEGORI");
        public final static Property QtyMaterial = new Property(4, String.class, "QtyMaterial", false, "QTY_MATERIAL");
        public final static Property QtySiap = new Property(5, String.class, "QtySiap", false, "QTY_SIAP");
        public final static Property Unit = new Property(6, String.class, "Unit", false, "UNIT");
        public final static Property StatusUji = new Property(7, String.class, "StatusUji", false, "STATUS_UJI");
        public final static Property KdPabrikan = new Property(8, String.class, "KdPabrikan", false, "KD_PABRIKAN");
    }


    public TPengujianDao(DaoConfig config) {
        super(config);
    }
    
    public TPengujianDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TPENGUJIAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TANGGAL_UJI\" TEXT," + // 1: TanggalUji
                "\"NO_PENGUJIAN\" TEXT," + // 2: NoPengujian
                "\"NAMA_KATEGORI\" TEXT," + // 3: NamaKategori
                "\"QTY_MATERIAL\" TEXT," + // 4: QtyMaterial
                "\"QTY_SIAP\" TEXT," + // 5: QtySiap
                "\"UNIT\" TEXT," + // 6: Unit
                "\"STATUS_UJI\" TEXT," + // 7: StatusUji
                "\"KD_PABRIKAN\" TEXT);"); // 8: KdPabrikan
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TPENGUJIAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TPengujian entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String TanggalUji = entity.getTanggalUji();
        if (TanggalUji != null) {
            stmt.bindString(2, TanggalUji);
        }
 
        String NoPengujian = entity.getNoPengujian();
        if (NoPengujian != null) {
            stmt.bindString(3, NoPengujian);
        }
 
        String NamaKategori = entity.getNamaKategori();
        if (NamaKategori != null) {
            stmt.bindString(4, NamaKategori);
        }
 
        String QtyMaterial = entity.getQtyMaterial();
        if (QtyMaterial != null) {
            stmt.bindString(5, QtyMaterial);
        }
 
        String QtySiap = entity.getQtySiap();
        if (QtySiap != null) {
            stmt.bindString(6, QtySiap);
        }
 
        String Unit = entity.getUnit();
        if (Unit != null) {
            stmt.bindString(7, Unit);
        }
 
        String StatusUji = entity.getStatusUji();
        if (StatusUji != null) {
            stmt.bindString(8, StatusUji);
        }
 
        String KdPabrikan = entity.getKdPabrikan();
        if (KdPabrikan != null) {
            stmt.bindString(9, KdPabrikan);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TPengujian entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String TanggalUji = entity.getTanggalUji();
        if (TanggalUji != null) {
            stmt.bindString(2, TanggalUji);
        }
 
        String NoPengujian = entity.getNoPengujian();
        if (NoPengujian != null) {
            stmt.bindString(3, NoPengujian);
        }
 
        String NamaKategori = entity.getNamaKategori();
        if (NamaKategori != null) {
            stmt.bindString(4, NamaKategori);
        }
 
        String QtyMaterial = entity.getQtyMaterial();
        if (QtyMaterial != null) {
            stmt.bindString(5, QtyMaterial);
        }
 
        String QtySiap = entity.getQtySiap();
        if (QtySiap != null) {
            stmt.bindString(6, QtySiap);
        }
 
        String Unit = entity.getUnit();
        if (Unit != null) {
            stmt.bindString(7, Unit);
        }
 
        String StatusUji = entity.getStatusUji();
        if (StatusUji != null) {
            stmt.bindString(8, StatusUji);
        }
 
        String KdPabrikan = entity.getKdPabrikan();
        if (KdPabrikan != null) {
            stmt.bindString(9, KdPabrikan);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TPengujian readEntity(Cursor cursor, int offset) {
        TPengujian entity = new TPengujian( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // TanggalUji
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // NoPengujian
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // NamaKategori
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // QtyMaterial
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // QtySiap
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // Unit
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // StatusUji
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // KdPabrikan
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TPengujian entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTanggalUji(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNoPengujian(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNamaKategori(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setQtyMaterial(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setQtySiap(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUnit(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setStatusUji(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setKdPabrikan(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TPengujian entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TPengujian entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TPengujian entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
