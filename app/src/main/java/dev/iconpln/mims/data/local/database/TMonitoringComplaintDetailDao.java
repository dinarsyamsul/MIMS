package dev.iconpln.mims.data.local.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TMONITORING_COMPLAINT_DETAIL".
*/
public class TMonitoringComplaintDetailDao extends AbstractDao<TMonitoringComplaintDetail, Long> {

    public static final String TABLENAME = "TMONITORING_COMPLAINT_DETAIL";

    /**
     * Properties of entity TMonitoringComplaintDetail.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property NoMatSap = new Property(1, String.class, "NoMatSap", false, "NO_MAT_SAP");
        public final static Property DoLineItem = new Property(2, String.class, "DoLineItem", false, "DO_LINE_ITEM");
        public final static Property TanggalPengajuan = new Property(3, String.class, "TanggalPengajuan", false, "TANGGAL_PENGAJUAN");
        public final static Property NoPackaging = new Property(4, String.class, "NoPackaging", false, "NO_PACKAGING");
        public final static Property NoSerial = new Property(5, String.class, "NoSerial", false, "NO_SERIAL");
        public final static Property NoKomplain = new Property(6, String.class, "NoKomplain", false, "NO_KOMPLAIN");
        public final static Property Status = new Property(7, String.class, "Status", false, "STATUS");
        public final static Property NoDoSmar = new Property(8, String.class, "NoDoSmar", false, "NO_DO_SMAR");
        public final static Property TanggalSelesai = new Property(9, String.class, "TanggalSelesai", false, "TANGGAL_SELESAI");
        public final static Property StatusPeriksa = new Property(10, String.class, "StatusPeriksa", false, "STATUS_PERIKSA");
        public final static Property PartialCode = new Property(11, String.class, "PartialCode", false, "PARTIAL_CODE");
        public final static Property IsChecked = new Property(12, Integer.class, "IsChecked", false, "IS_CHECKED");
        public final static Property IsDone = new Property(13, Integer.class, "IsDone", false, "IS_DONE");
    }


    public TMonitoringComplaintDetailDao(DaoConfig config) {
        super(config);
    }
    
    public TMonitoringComplaintDetailDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TMONITORING_COMPLAINT_DETAIL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NO_MAT_SAP\" TEXT," + // 1: NoMatSap
                "\"DO_LINE_ITEM\" TEXT," + // 2: DoLineItem
                "\"TANGGAL_PENGAJUAN\" TEXT," + // 3: TanggalPengajuan
                "\"NO_PACKAGING\" TEXT," + // 4: NoPackaging
                "\"NO_SERIAL\" TEXT," + // 5: NoSerial
                "\"NO_KOMPLAIN\" TEXT," + // 6: NoKomplain
                "\"STATUS\" TEXT," + // 7: Status
                "\"NO_DO_SMAR\" TEXT," + // 8: NoDoSmar
                "\"TANGGAL_SELESAI\" TEXT," + // 9: TanggalSelesai
                "\"STATUS_PERIKSA\" TEXT," + // 10: StatusPeriksa
                "\"PARTIAL_CODE\" TEXT," + // 11: PartialCode
                "\"IS_CHECKED\" INTEGER," + // 12: IsChecked
                "\"IS_DONE\" INTEGER);"); // 13: IsDone
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TMONITORING_COMPLAINT_DETAIL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TMonitoringComplaintDetail entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String NoMatSap = entity.getNoMatSap();
        if (NoMatSap != null) {
            stmt.bindString(2, NoMatSap);
        }
 
        String DoLineItem = entity.getDoLineItem();
        if (DoLineItem != null) {
            stmt.bindString(3, DoLineItem);
        }
 
        String TanggalPengajuan = entity.getTanggalPengajuan();
        if (TanggalPengajuan != null) {
            stmt.bindString(4, TanggalPengajuan);
        }
 
        String NoPackaging = entity.getNoPackaging();
        if (NoPackaging != null) {
            stmt.bindString(5, NoPackaging);
        }
 
        String NoSerial = entity.getNoSerial();
        if (NoSerial != null) {
            stmt.bindString(6, NoSerial);
        }
 
        String NoKomplain = entity.getNoKomplain();
        if (NoKomplain != null) {
            stmt.bindString(7, NoKomplain);
        }
 
        String Status = entity.getStatus();
        if (Status != null) {
            stmt.bindString(8, Status);
        }
 
        String NoDoSmar = entity.getNoDoSmar();
        if (NoDoSmar != null) {
            stmt.bindString(9, NoDoSmar);
        }
 
        String TanggalSelesai = entity.getTanggalSelesai();
        if (TanggalSelesai != null) {
            stmt.bindString(10, TanggalSelesai);
        }
 
        String StatusPeriksa = entity.getStatusPeriksa();
        if (StatusPeriksa != null) {
            stmt.bindString(11, StatusPeriksa);
        }
 
        String PartialCode = entity.getPartialCode();
        if (PartialCode != null) {
            stmt.bindString(12, PartialCode);
        }
 
        Integer IsChecked = entity.getIsChecked();
        if (IsChecked != null) {
            stmt.bindLong(13, IsChecked);
        }
 
        Integer IsDone = entity.getIsDone();
        if (IsDone != null) {
            stmt.bindLong(14, IsDone);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TMonitoringComplaintDetail entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String NoMatSap = entity.getNoMatSap();
        if (NoMatSap != null) {
            stmt.bindString(2, NoMatSap);
        }
 
        String DoLineItem = entity.getDoLineItem();
        if (DoLineItem != null) {
            stmt.bindString(3, DoLineItem);
        }
 
        String TanggalPengajuan = entity.getTanggalPengajuan();
        if (TanggalPengajuan != null) {
            stmt.bindString(4, TanggalPengajuan);
        }
 
        String NoPackaging = entity.getNoPackaging();
        if (NoPackaging != null) {
            stmt.bindString(5, NoPackaging);
        }
 
        String NoSerial = entity.getNoSerial();
        if (NoSerial != null) {
            stmt.bindString(6, NoSerial);
        }
 
        String NoKomplain = entity.getNoKomplain();
        if (NoKomplain != null) {
            stmt.bindString(7, NoKomplain);
        }
 
        String Status = entity.getStatus();
        if (Status != null) {
            stmt.bindString(8, Status);
        }
 
        String NoDoSmar = entity.getNoDoSmar();
        if (NoDoSmar != null) {
            stmt.bindString(9, NoDoSmar);
        }
 
        String TanggalSelesai = entity.getTanggalSelesai();
        if (TanggalSelesai != null) {
            stmt.bindString(10, TanggalSelesai);
        }
 
        String StatusPeriksa = entity.getStatusPeriksa();
        if (StatusPeriksa != null) {
            stmt.bindString(11, StatusPeriksa);
        }
 
        String PartialCode = entity.getPartialCode();
        if (PartialCode != null) {
            stmt.bindString(12, PartialCode);
        }
 
        Integer IsChecked = entity.getIsChecked();
        if (IsChecked != null) {
            stmt.bindLong(13, IsChecked);
        }
 
        Integer IsDone = entity.getIsDone();
        if (IsDone != null) {
            stmt.bindLong(14, IsDone);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TMonitoringComplaintDetail readEntity(Cursor cursor, int offset) {
        TMonitoringComplaintDetail entity = new TMonitoringComplaintDetail( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // NoMatSap
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // DoLineItem
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // TanggalPengajuan
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // NoPackaging
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // NoSerial
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // NoKomplain
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // Status
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // NoDoSmar
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // TanggalSelesai
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // StatusPeriksa
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // PartialCode
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // IsChecked
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13) // IsDone
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TMonitoringComplaintDetail entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNoMatSap(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDoLineItem(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTanggalPengajuan(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNoPackaging(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setNoSerial(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setNoKomplain(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setStatus(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setNoDoSmar(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTanggalSelesai(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setStatusPeriksa(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPartialCode(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setIsChecked(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setIsDone(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TMonitoringComplaintDetail entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TMonitoringComplaintDetail entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TMonitoringComplaintDetail entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
