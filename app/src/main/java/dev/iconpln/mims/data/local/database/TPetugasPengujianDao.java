package dev.iconpln.mims.data.local.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TPETUGAS_PENGUJIAN".
*/
public class TPetugasPengujianDao extends AbstractDao<TPetugasPengujian, Long> {

    public static final String TABLENAME = "TPETUGAS_PENGUJIAN";

    /**
     * Properties of entity TPetugasPengujian.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Nip = new Property(1, String.class, "Nip", false, "NIP");
        public final static Property NamaPetugas = new Property(2, String.class, "NamaPetugas", false, "NAMA_PETUGAS");
        public final static Property Jabatan = new Property(3, String.class, "Jabatan", false, "JABATAN");
        public final static Property NoPengujian = new Property(4, String.class, "NoPengujian", false, "NO_PENGUJIAN");
    }


    public TPetugasPengujianDao(DaoConfig config) {
        super(config);
    }
    
    public TPetugasPengujianDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TPETUGAS_PENGUJIAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NIP\" TEXT," + // 1: Nip
                "\"NAMA_PETUGAS\" TEXT," + // 2: NamaPetugas
                "\"JABATAN\" TEXT," + // 3: Jabatan
                "\"NO_PENGUJIAN\" TEXT);"); // 4: NoPengujian
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TPETUGAS_PENGUJIAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TPetugasPengujian entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String Nip = entity.getNip();
        if (Nip != null) {
            stmt.bindString(2, Nip);
        }
 
        String NamaPetugas = entity.getNamaPetugas();
        if (NamaPetugas != null) {
            stmt.bindString(3, NamaPetugas);
        }
 
        String Jabatan = entity.getJabatan();
        if (Jabatan != null) {
            stmt.bindString(4, Jabatan);
        }
 
        String NoPengujian = entity.getNoPengujian();
        if (NoPengujian != null) {
            stmt.bindString(5, NoPengujian);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TPetugasPengujian entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String Nip = entity.getNip();
        if (Nip != null) {
            stmt.bindString(2, Nip);
        }
 
        String NamaPetugas = entity.getNamaPetugas();
        if (NamaPetugas != null) {
            stmt.bindString(3, NamaPetugas);
        }
 
        String Jabatan = entity.getJabatan();
        if (Jabatan != null) {
            stmt.bindString(4, Jabatan);
        }
 
        String NoPengujian = entity.getNoPengujian();
        if (NoPengujian != null) {
            stmt.bindString(5, NoPengujian);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TPetugasPengujian readEntity(Cursor cursor, int offset) {
        TPetugasPengujian entity = new TPetugasPengujian( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Nip
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // NamaPetugas
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Jabatan
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // NoPengujian
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TPetugasPengujian entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNip(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNamaPetugas(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setJabatan(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNoPengujian(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TPetugasPengujian entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TPetugasPengujian entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TPetugasPengujian entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
